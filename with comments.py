def CC(p,k,m):
	m=str(m)
	#перевод числа m из сс с основанием p в сс с основанием k
	a=['A','B','C','D','E','F']
	c=[] #это для цифр, в том числе для букв А,В,С,.. в десятичном представлении
	ten=0 #здесь будет храниться 10-ичная запись числа
	power=len(m) #нужен для перевода из p в 10 (степень, в которую будет возводиться основание при умножении на цифры числа)

	#это строку вида A24B4D преобразовывает в [10,2,4,11,4,13]
	for i in range(len(m)):
		temp=m[i]
		if temp in a:
			#если этот символ есть в списке а, значит это сс с основанием больше 9
			#a.index(temp) возвращает индекс элемента. Удобно то, что А с индексом 0, В с индексом 1 и т.д., т.к. А=10, а В=11. Можно легко 
			#записать операцию так, как это сделано:
			temp=10+(a.index(temp))
		c.append(temp)

	#перевод собственно из p в 10                                                           3 2 1 0
	#список с содержит "цифры" исходного числа, то есть А=10, В=11 и т.д. Перевод идет так: a b c d (n) = a*n^3 + b*n^2 + c*n + d*n^0 (10)
	#a,b,c,d это и есть значения из списка с.
	for i in range(power):
		ten+=int(c[i])*(p**(power-i-1))

	#если требуется перевести в 10-ичную сс, мы это уже сделали. Возвращаем.
	if k==10:
		return ten

	#Ну а если нет, то сюда. Создается новая пустая строка. Остаток от деления ten (10-ичного числа) на основание новой сс приписывается новой 
	#строке спереди. Почему? Потому что когда мы переводим из 10 в другую сс, мы делим на основание, а потом записываем остатки в обратном
	#порядке. Здесь они сразу вперед записываются, поразрядно. Если ten % k  >  9 (то есть если остаток, который мы собираемся 
	#приписывать, больше 9, то нужно его представлять в виде буквы). Делается это несложно, опять-таки потому что А с индексом 0, В с индексом 1
	#и т.д. Мы берем остаток от деления остатка(который нужно приписать) на 10, таким образом находим индекс нужного элемента в а (0-А,1-В и т.д)
	#ну и в конце ten нацело делится на 10, убирая уже переконвертированный разряд. 
	else:
		newNum = ''
		while ten > 0:
			if ten%k>9:
				newNum = a[(ten % k)%10] + newNum
			else:
				newNum = str(ten % k) + newNum
			ten //= k
		return newNum